# 运行 nginx 的所有者和所有组
#user nobody; 

# worker 进程个数，推荐与CPU数量相同,不确定时候,可使用 auto
# 查看核数 cat /proc/cpuinfo |grep "processor" | wc -l
worker_processes 2;

# Linux only.使用该选项可以绑定worker进程和CPU.
worker_cpu_affinity 0001 0010;

# 使用该选项可以给所有的worker进程分配优先值.
worker_priority on;

# 所有web进程能够打开的文件数，需要服务器也支持
#一个进程能同事处理 65535 请求
worker_rlimit_nofile 65535;

# 是否以守护进程方式运行 nginx(需要编译配置添加 --width-debug)
#daemon off;

# 是否以master/worker模型来运行
#master_process off;

# 日志文件, 级别 debug | info | notice | warn | error | alert | emerg
#error_log  logs/error.log;
#error_log  logs/error.log  notice; 
#error_log  logs/error.log  info;

# 指定 nginx 守护进程的 pid 文件
#pid        logs/nginx.pid; 



#nginx中所有处理连接的设置
events {
    # master 调度用户请求至多单个 worker 进程时使用的负载均衡锁.(on 表示轮流、序列化的响应新请求.)
    #accept_mutex off;

    # 延迟等待时间，默认为500ms
    #accept_mutex_delay time;

    # accept_mutex用到的锁文件路径
    #lock_file file;

    # 指明时间模型
    use epoll;

    # 在接收到一个新的请求之后没借口尽可能多的链接
    multi_accept on;

    # 单个 worker 进程能够打开的最大并发连接数 worker_processes*worker_connections
    worker_connections 65535;
}

http {
    #显示版本信息，即编译前修改的banner信息
    server_tokens on;
    include mime.types;
    #缓存临时文件大小，超过的不要刷磁盘缓存，直接传，防止大响应影响磁盘IO
    include sites/*.conf;
    default_type application/octet-stream;
    log_format main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    # 默认访问日志路径
    access_log logs/access.log  main;
    access_log off;
    sendfile on;
    #tcp_nopush     on;
    #超时时间  0;
    keepalive_timeout 60;
    #网页压缩
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    #gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml application/javascript text/javascript;
    gzip_vary off;
    gzip_disable "MSIE [1-6]\."
    #允许上传最大2G文件
    client_max_body_size 2000M;
    client_body_buffer_size 512k;
    client_header_timeout 1m;
    client_body_timeout 1m;
    client_header_buffer_size 16k;
    large_client_header_buffers 4 64k;
    #proxy_buffer
    proxy_buffer_size 4k;
    proxy_buffers 4 32k;
    proxy_busy_buffers_size 64k;
    proxy_temp_file_write_size 64k;
}
